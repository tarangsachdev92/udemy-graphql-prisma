# instead of commented code above it import the enum and we can assign it where needed
# prisma/graphql-import/ which is in-build for grphql-yoga

# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  posts(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: PostOrderByInput
  ): [Post!]!
  myPosts(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: PostOrderByInput
  ): [Post!]!
  comments(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: CommentOrderByInput
  ): [Comment!]!
  post(id: ID!): Post!
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  # deleteUser(id: ID!): User!
  # updateUser(id: ID!, data: UpdateUserInput!): User!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
  myPost: PostSubscriptionPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

type User {
  id: ID!
  name: String!
  # email: String!
  email: String
  #remove ! because when you are firing me query then only email will be string othere wise for all users query we don't want
  # to give email as we will give email : null;
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  # author: ID!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

input CreateCommentInput {
  text: String!
  # author: ID!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: String!
  createdAt: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post # prisma give node: Comment so we provide here to align that
  # updatedFields: [String!]
  # previousValues: Post
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment # prisma give node: Comment so we provide here to align that
  # updatedFields: [String!]
  # previousValues: Comment
}
